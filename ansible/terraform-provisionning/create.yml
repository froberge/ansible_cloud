---
- name: Provision VM in cloud with Terraform
  hosts: localhost
  gather_facts: false

  tasks: 
    # - name: Git checkout
    #   ansible.builtin.git:
    #     repo: 'git@github.com:froberge/ansible_terraform_config.git'
    #     dest: /tmp/terraform
    #     version: main
    #     accept_newhostkey: true
    #     key_file: "{{ cert_key_file }}"

    - name: Git checkout
      ansible.builtin.git:
        repo: 'https://{{ git_user }}:{{ git_token }}@github.com/froberge/ansible_terraform_config.git'
        dest: /tmp/terraform
        version: main

    - name: Decrypt terraform states files
      ansible.builtin.expect:
        command: 'ansible-vault decrypt terraform.tfstate terraform.tfstate.backup terraform.tfvars'
        chdir: /tmp/terraform/aws
        responses:
          password: "{{ pah_pass }}"

    - name: Provision the infra with Terraform
      cloud.terraform.terraform:
        project_path: "/tmp/terraform/aws/"
        state: "present"
        force_init: true        
      register: terraformInfra

    - name: Encrypt terraform states files
      ansible.builtin.expect:
        command: 'ansible-vault encrypt terraform.tfstate terraform.tfstate.backup terraform.tfvars'
        chdir: /tmp/terraform/aws
        responses:
          password: "{{ pah_pass }}"

    - name: Update git repo with terraform files
      ansible.builtin.shell: git remote set-url origin https://{{ git_user }}:{{ git_token }}@github.com/froberge/ansible_terraform_config.git && git add -A && git commit -m "Synching new files to repo" && git push
      args:
        chdir: /tmp/terraform/aws
      environment:
        GIT_COMMITTER_NAME: "{{ git_name | default(omit) }}"
        GIT_COMMITTER_EMAIL: "{{ git_email | default(omit) }}"
        GIT_AUTHOR_NAME: "{{ git_name | default(omit) }}"
        GIT_AUTHOR_EMAIL: "{{ git_email | default(omit) }}"
